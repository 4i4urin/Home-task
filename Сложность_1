#include <stdio.h>
#include <stdlib.h>
#include <time.h>

struct student
{
	char* id;
	char* familyname;
	char* name;
	char* fathername;
	char* index;
	char* specialist;
};

int menu();

struct student* input_student(struct student*, int*, FILE*);//заполняет массив структур
char* input_str_file(int*, FILE*);//считывает строку с файла
char* input_str_consol(int*);//считывает строку с консоли

void shell_sort_struct(struct student*, int);//сортирует структуры по ID
void shell_sort_struct_name(struct student*, int);
int string_cmd(char*, char*);// сравнивает две строки 1 первая строка больше; -1 вторая 0 равны
int bin_search(char**, char*, int);// ищет строку из массива строк

void show(struct student*, int, int);// показывает студентов от первого инта до второго

struct student* add(struct student*, int*);// добавляет студента в конец

void delite(struct student*, int*);// удаляет студента по ID

struct student* from_beakup(struct student*, int*);// востанавливает студента из бекапа

void do_beackup(struct student*, int);// создаёт бэкап файл
char* file_name();// возвращает имя бэкап файла

void find(struct student*, int);// ищет и выводит студентов по фамилии

int main()
{
	int number_students = 0;
	FILE* students = fopen("students.csv", "r");
	struct student *stud = calloc(1, sizeof(struct student));
	stud = input_student(stud, &number_students, students);
	fclose(students);
	int from_menu = menu();
	while (from_menu)
	{
		switch(from_menu)
		{
			case 1: shell_sort_struct(stud, number_students); show(stud, 0, number_students); from_menu = menu(); break;
			case 2: stud = add(stud, &number_students); from_menu = menu(); break;
			case 3: delite(stud, &number_students); from_menu = menu(); break;
			case 4: stud = from_beakup(stud, &number_students); from_menu = menu(); break;
			case 5: do_beackup(stud, number_students); from_menu = menu(); break;
			case 6: find(stud, number_students); from_menu = menu(); break;
		}
	}
	free(stud);
	return 0;
}

int menu()
{
	int menu;
	while (1)
	{
		puts("Write:");
		puts("-s to show all students"); // menu = 1
		puts("-a to add student"); // menu = 2
		puts("-d to delite student"); // menu = 3
		puts("-r to restabilish students from beakup"); // menu = 4
		puts("-b to create beckup file"); // menu = 5
		puts("-f to find students for id"); // menu = 6
		puts("-q to quite"); // menu = 0
		char c1 = getchar();
		if (c1 != '-')
		{
			puts("\nI don't know such point\n");
			while (c1 != '\n') c1 = getchar();//убирает оставшиесе символы
			continue;
		}
		c1 = getchar();
		char c2 = getchar();
		if (c2 != '\n')
		{
			puts("\nI don't know such point \\n\n");
			while (c1 != '\n') c1 = getchar();
			continue;
		}
		switch (c1)
		{
			case 's': menu = 1; break;
			case 'a': menu = 2; break;
			case 'd': menu = 3; break;
			case 'r': menu = 4; break;
			case 'b': menu = 5; break;
			case 'f': menu = 6; break;
			case 'q': menu = 0; break;
			default: puts("\nI don't know such point\n"); continue;
		}
		break;
	}
	return menu;
}

struct student* input_student(struct student* ptr_struct, int* i, FILE* txt)
{
	int Eof = 1;
	while (Eof != 0)
	{
		(ptr_struct + *i)->id = input_str_file(&Eof, txt);
		(ptr_struct + *i)->familyname = input_str_file(&Eof, txt);
		(ptr_struct + *i)->name = input_str_file(&Eof, txt);
		(ptr_struct + *i)->fathername = input_str_file(&Eof, txt);
		(ptr_struct + *i)->index = input_str_file(&Eof, txt);
		(ptr_struct + *i)->specialist = input_str_file(&Eof, txt);
		*i += 1; ptr_struct = realloc(ptr_struct, (*i + 1) * sizeof(struct student));		
	}
	ptr_struct = realloc(ptr_struct, (*i - 1) * sizeof(struct student));//освобаждает лишню память
	*i -= 1;
	return ptr_struct;
}

char* input_str_file(int* Eof, FILE* txt)//считывает строку в случае конца файла возвращает 0
{
	int i = 0, c;// \n и ; не считываются
	char* ptr_str = calloc(1, sizeof(char));
	while ((c = getc(txt)) != ';' && c != '\n' && c != EOF)
	{
		*(ptr_str + i) = c;
		i += 1;
		ptr_str = realloc(ptr_str, (i + 1) * sizeof(char));
	}
	*(ptr_str + i) = '\0';
	if (c == EOF)
		*Eof = 0;
	return ptr_str;
}

void show(struct student* student, int i, int right)//i левая граница массива
{
	printf("|   ID   |  familyname   |     name      |  fathername   |index|specialist\n");
	printf("+--------+---------------+---------------+---------------+-----+----------\n");
	for (i; i < right; ++i)
	{
		printf("|%8s|%15s|%15s|%15s|%5s|%s\n", student[i].id, student[i].familyname, student[i].name, student[i].fathername, student[i].index, student[i].specialist);
	}
	printf("+--------+---------------+---------------+---------------+-----+----------\n");
}

struct student* add(struct student* ptr_struct, int* num)
{
	FILE* txt = fopen("students.csv", "a");
	char* proverka;
	shell_sort_struct(ptr_struct, *num);
	char** ID_mas = calloc(*num, sizeof(char*));
	for (int i = 0; i < *num; ++i)
		ID_mas[i] = (ptr_struct + i)->id;//создаём массив id для поиска
	puts("Write student in rhis format");
	puts("1H3089;Ivanov;Makar;Makarovich;SM;specialnost");
	ptr_struct = realloc(ptr_struct, (*num + 1)*sizeof(struct student));
	proverka = input_str_consol(NULL);
	if (bin_search(ID_mas, proverka, *num) != -1)
	{
		printf("\nThis Id already exists %s\n\n", proverka);
		ptr_struct = realloc(ptr_struct, *num * sizeof(struct student));
		fclose(txt);
		free(ID_mas);
		char c;
		while((c = getchar()) != '\n');
		return ptr_struct;
	}
	(ptr_struct + *num)->id = proverka;
	fprintf(txt, "%s;", (ptr_struct + *num)->id);
	(ptr_struct + *num)->familyname = input_str_consol(NULL);
	fprintf(txt, "%s;", (ptr_struct + *num)->familyname);
	(ptr_struct + *num)->name = input_str_consol(NULL);
	fprintf(txt, "%s;", (ptr_struct + *num)->name);
	(ptr_struct + *num)->fathername = input_str_consol(NULL);
	fprintf(txt, "%s;", (ptr_struct + *num)->fathername);
	(ptr_struct + *num)->index = input_str_consol(NULL);
	fprintf(txt, "%s;", (ptr_struct + *num)->index);
	(ptr_struct + *num)->specialist = input_str_consol(NULL);
	fprintf(txt, "%s\n", (ptr_struct + *num)->specialist);
	*num += 1;
	fclose(txt);
	free(ID_mas);
	return ptr_struct;
}

void delite (struct student* ptr_struct, int* num)
{
	char** ID_mas = calloc(*num, sizeof(char*));
	shell_sort_struct(ptr_struct, *num);
	for (int i = 0; i < *num; ++i)
		ID_mas[i] = (ptr_struct + i)->id;//создаём массив id для поиска
	puts("Write id of the student you want delite");
	char* consol = input_str_consol(NULL);
	int del = bin_search(ID_mas, consol, *num);
	free(ID_mas);
	if (del == -1)
	{
		printf("\nI don't know this student %s\n\n", consol);
		return;
	}
	free(consol);
	if (del != *num - 1)
		ptr_struct[del] = ptr_struct[*num - 1];
	else
		ptr_struct[del] = ptr_struct[*num - 2];
	shell_sort_struct(ptr_struct, *num);
	FILE* csv = fopen("students.csv", "w");
	for (int i = 0; i < *num - 1; ++i)
		fprintf(csv, "%s;%s;%s;%s;%s;%s\n", (ptr_struct + i)->id, (ptr_struct + i)->familyname, (ptr_struct + i)->name, (ptr_struct + i)->fathername, (ptr_struct + i)->index, (ptr_struct + i)->specialist);
	fclose(csv);
	*num -= 1;
}

struct student* from_beakup(struct student* ptr_struct, int* num)
{
	puts("Write name backup file");
	char* file = input_str_consol(NULL);
	FILE* backup = fopen(file, "r");
	if (backup == 0)
	{
		printf("\nNo such file %s\n\n", file);
		return ptr_struct;
	}
	*num = 0;
	free(file);
	ptr_struct = input_student(ptr_struct, num, backup);
	fclose(backup);
	show(ptr_struct, 0 *num);
	FILE* csv = fopen("students.csv", "w");
	if (csv == 0)
	{
		printf("\nProblrm with students.csv\n\n");
		return ptr_struct;
	}
	for (int i = 0; i < *num; ++i)
		fprintf(csv, "%s;%s;%s;%s;%s;%s\n", (ptr_struct + i)->id, (ptr_struct + i)->familyname, (ptr_struct + i)->name, (ptr_struct + i)->fathername, (ptr_struct + i)->index, (ptr_struct + i)->specialist);
	fclose(csv);
	return ptr_struct;
}

char* file_name()
{
	long int s_time = time(NULL);
	struct tm *m_time;
	char str_t[18];
	m_time = localtime (&s_time);
	strftime(str_t, 18, "%d.%m.%y_%X", m_time);
	char s1[] = "students_";
	char* f_name = calloc(27, sizeof(char));
	int i, j = 0, k = 0;
	for (i = 0; i < 9; ++i)
		f_name[i] = s1[i];
	for (i = 9, j; j < 27; ++i, ++j)
		f_name[i] = str_t[j];
	return f_name;
}

void do_beackup(struct student* ptr_struct, int num)
{
	char* f_name = file_name();
	printf("File name is %s\n", f_name);
	FILE* beakup = fopen(f_name, "w");
	if (beakup == 0)
	{
		puts("Cant't create file\n");
		return;
	}
	for (int i = 0; i < num; ++i)
		fprintf(beakup, "%s;%s;%s;%s;%s;%s\n", (ptr_struct + i)->id, (ptr_struct + i)->familyname, (ptr_struct + i)->name, (ptr_struct + i)->fathername, (ptr_struct + i)->index, (ptr_struct + i)->specialist);
	puts("Success\n");
	fclose(beakup);
	free(f_name);
}

void find(struct student* ptr_struct, int num)
{
	shell_sort_struct_name(ptr_struct, num);
	char** name_arr = calloc(num, sizeof(char*));
	for (int i = 0; i < num; ++i)
		name_arr[i] = (ptr_struct + i)->familyname;
	show(ptr_struct, 0, num);
	char* consol = input_str_consol(NULL);
	int flag = bin_search(name_arr, consol, num);
	if (flag == -1)
	{
		printf("\nNo such student %s\n\n", consol);
		return;
	}
	int left = flag, right = flag;
	show(ptr_struct, flag, flag + 1);
	while((ptr_struct + left - 1) > 0 && left != 0)
	{
		if (string_cmd((ptr_struct + left - 1)->familyname, consol) != -1)
			left -= 1;
		else
			break;
	}
	while((ptr_struct + right + 1) > 0 && right < num - 1)
	{
		if (string_cmd((ptr_struct + right + 1)->familyname, consol) != 1)
			right += 1;
		else
			break;
	}
	free(name_arr);
	free(consol);
	show(ptr_struct, left, right + 1);
}

int bin_search(char** mas_str, char* x, int high)
{
	int low = 0;
	while (low <= high)
	{
		int mid = (low + high) / 2;
		if (string_cmd(mas_str[mid], x) == 1) //mas_str[mid] > x
			high = mid - 1;
		else if (string_cmd(x, mas_str[mid]) == 1)// x > mas_str[mid]
			low = mid + 1;
		else 
			return mid;
	}
	return -1;
}

void shell_sort_struct_name(struct student* ptr_struct, int n)
{
	int gap, i, j;
	for (gap = n/2; gap > 0; gap /= 2)
	{
		for (i = gap; i < n; ++i)
		{//                                          prt_s[j] > ptr_s[j + gap]
			for (j = i - gap; j >= 0 && string_cmd(ptr_struct[j].familyname, ptr_struct[j + gap].familyname) == 1; j -= gap)
			{
				struct student temp = ptr_struct[j];
				ptr_struct[j] = ptr_struct[j + gap];
				ptr_struct[j + gap] = temp;
			}
		}
	}
}

void shell_sort_struct(struct student* ptr_struct, int n)
{
	int gap, i, j;
	for (gap = n/2; gap > 0; gap /= 2)
	{
		for (i = gap; i < n; ++i)
		{//                                          prt_s[j] > ptr_s[j + gap]
			for (j = i - gap; j >= 0 && string_cmd(ptr_struct[j].id, ptr_struct[j + gap].id) == 1; j -= gap)
			{
				struct student temp = ptr_struct[j];
				ptr_struct[j] = ptr_struct[j + gap];
				ptr_struct[j + gap] = temp;
			}
		}
	}
}

int string_cmd(char* s1, char* s2)//сравнивает строки
{                                       // flag = 0 равны flag = 1 первая больше второй
	int flag, i;						// flag = -1 вторая больше первой в программе это не используется
	for (i = 0; s1[i] != '\0' && s2[i] != '\0'; ++i)
	{
		if (s1[i] != s2[i])
		{
			if (s1[i] > s2[i])
				flag = 1;
			else
				flag = -1;
			return flag;
		}
	}
	if (s1[i] > s2[i])
		flag = 1;
	else if (s1[i] < s2[i])
	{
		flag = -1;
	}else
		flag = 0;
	return flag;
}

char* input_str_consol(int* Eof)
{
	int i = 0, c;// \n и ; не считываются
	char* ptr_str = calloc(1, sizeof(char));
	while ((c = getchar()) != ';' && c != '\n' && c != EOF)
	{
		*(ptr_str + i) = c;
		i += 1;
		ptr_str = realloc(ptr_str, (i + 1) * sizeof(char));
	}
	*(ptr_str + i) = '\0';
	if (c == EOF)
		*Eof = 0;
	return ptr_str;
}
